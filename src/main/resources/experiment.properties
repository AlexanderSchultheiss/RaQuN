# Matchers that are taken into account. These matchers have to be defined as shown below
# Template: Specification for matcher with name TEMPLATE
## Specify the algorithm: NwM, PairwiseAsc, PairwiseDesc, or RaQuN
## experiments.matchers.algorithm.TEMPLATE =
## experiments.matchers.name.TEMPLATE =
## Additional configuration is required if the matcher is based on RaQuN
## experiments.matchers.vectorization.TEMPLATE = de.variantsync.matching.raqun.vectorization.PropertyBasedVectorization
## experiments.matchers.validity.TEMPLATE = de.variantsync.matching.raqun.validity.OneToOneValidity
## experiments.matchers.similarity.TEMPLATE = de.variantsync.matching.raqun.similarity.WeightMetric

# NwM
experiments.matchers.algorithm.nwm = NwM
experiments.matchers.name.nwm = NwM

# Pairwise Ascending
experiments.matchers.algorithm.pairwise-ascending = PairwiseAsc
experiments.matchers.name.pairwise-ascending = PairwiseAsc

# Pairwise Descending
experiments.matchers.algorithm.pairwise-descending = PairwiseDesc
experiments.matchers.name.pairwise-descending = PairwiseDesc

# RaQuN using the property-based vectorization
experiments.matchers.algorithm.raqun-prop = RaQuN
experiments.matchers.name.raqun-prop = RaQuN-Property-Vec
experiments.matchers.vectorization.raqun-prop = de.variantsync.matching.raqun.vectorization.PropertyBasedVectorization
experiments.matchers.validity.raqun-prop = de.variantsync.matching.raqun.validity.OneToOneValidity
experiments.matchers.similarity.raqun-prop = de.variantsync.matching.raqun.similarity.WeightMetric

# RaQuN using the character-based vectorization
experiments.matchers.algorithm.raqun-char = RaQuN
experiments.matchers.name.raqun-char = RaQuN-Character-Vec
experiments.matchers.vectorization.raqun-char = de.variantsync.matching.raqun.vectorization.CharacterBasedVectorization
experiments.matchers.validity.raqun-char = de.variantsync.matching.raqun.validity.OneToOneValidity
experiments.matchers.similarity.raqun-char = de.variantsync.matching.raqun.similarity.WeightMetric

experiments.matchers.algorithm.raqun-overlap-25 = RaQuN
experiments.matchers.name.raqun-overlap-25 = RaQuN-Overlap-25
experiments.matchers.vectorization.raqun-overlap-25 = de.variantsync.matching.raqun.vectorization.CharacterBasedVectorization
experiments.matchers.validity.raqun-overlap-25 = de.variantsync.matching.raqun.validity.OneToOneValidity
experiments.matchers.similarity.raqun-overlap-25 = de.variantsync.matching.raqun.similarity.OverlapCoefficient
experiments.matchers.similarity.parameters.raqun-overlap-25 = 0.25

experiments.matchers.algorithm.raqun-overlap-50 = RaQuN
experiments.matchers.name.raqun-overlap-50 = RaQuN-Overlap-50
experiments.matchers.vectorization.raqun-overlap-50 = de.variantsync.matching.raqun.vectorization.CharacterBasedVectorization
experiments.matchers.validity.raqun-overlap-50 = de.variantsync.matching.raqun.validity.OneToOneValidity
experiments.matchers.similarity.raqun-overlap-50 = de.variantsync.matching.raqun.similarity.OverlapCoefficient
experiments.matchers.similarity.parameters.raqun-overlap-50 = 0.50

experiments.matchers.algorithm.raqun-overlap-75 = RaQuN
experiments.matchers.name.raqun-overlap-75 = RaQuN-Overlap-75
experiments.matchers.vectorization.raqun-overlap-75 = de.variantsync.matching.raqun.vectorization.CharacterBasedVectorization
experiments.matchers.validity.raqun-overlap-75 = de.variantsync.matching.raqun.validity.OneToOneValidity
experiments.matchers.similarity.raqun-overlap-75 = de.variantsync.matching.raqun.similarity.OverlapCoefficient
experiments.matchers.similarity.parameters.raqun-overlap-75 = 0.75

experiments.matchers.algorithm.raqun-overlap-100 = RaQuN
experiments.matchers.name.raqun-overlap-100 = RaQuN-Overlap-100
experiments.matchers.vectorization.raqun-overlap-100 = de.variantsync.matching.raqun.vectorization.CharacterBasedVectorization
experiments.matchers.validity.raqun-overlap-100 = de.variantsync.matching.raqun.validity.OneToOneValidity
experiments.matchers.similarity.raqun-overlap-100 = de.variantsync.matching.raqun.similarity.OverlapCoefficient
experiments.matchers.similarity.parameters.raqun-overlap-100 = 0.99

# Timeout configuration
experiments.timeout.duration = 5
# Timeout unit; possible values: SECONDS, MINUTES, HOURS, DAYS
experiments.timeout.unit = SECONDS

# Extra-Verbose mode, prints the tuples of each matching
experiments.execution.verbose = false
# Number of times each setup is executed, e.g., how often should RaQuN with high dimension vectorization be
# run on the dataset Hospital? The number of repetitions does not affect the required resources, only the total runtime.
# For RQ1 and RQ2, we ran 10 executions รก 3 repetitions in parallel (30 executions in total).
# However, this can only be done on a dedicated compute server with a large amount of resources.
# For RQ3, we ran 1 execution with 1 repetition (1 execution in total, but there are 30 datasets per subset size).
# If you plan on repeating our experiments on a system with limited resources, we advice to only run one docker container
# at a time.
experiments.execution.repetitions.rq1 = 1
experiments.execution.repetitions.rq2 = 1
experiments.execution.repetitions.rq3 = 1

experiments.rq1.matchers = nwm, pairwise-ascending, pairwise-descending, raqun-prop
# RQ1 can be evaluated on any dataset, thus, you can either specify the datasets' names or "ALL"
#experiments.rq1.datasets = hospitals, warehouses, random, randomLoose, randomTight, ppu, ppu_statem, bcs, bcms, Apogames, argouml, simulink_family_1, simulink_family_2
experiments.rq1.datasets = ALL

# Range of k for the evaluation of different numbers of neighbors for the candidate search for RQ2
experiments.rq2.start-k = 1
experiments.rq2.max-k = 20
experiments.rq2.max-k-argouml = 10
experiments.rq2.matcher = raqun-prop
# RQ2 requires datasets with a ground truth
experiments.rq2.datasets = ppu, bcms, argouml

# RQ3 uses the generated argouml subsets so there is no alternative option regarding the subsets. However, you can
# specify till which subset size to run the experiments (inclusively). To do so specify a percentage in a three digit format
# Examples:
# Run 1% and 5% subsets:
# experiments.rq3.largest-dataset = 005
# Run 1% - 65% subsets:
# experiments.rq.largest-dataset = 065
# Run all subsets plus the full ArgoUML
# experiments.rq3.largest-dataset = 100
# We only require `095` because the full ArgoUML is already run by RQ1
experiments.rq3.largest-dataset = 095
experiments.rq3.matchers = nwm, pairwise-ascending, pairwise-descending, raqun-prop


experiments.rq4.matchers = raqun-char
# RQ4 can be evaluated on any dataset, thus, you can either specify the datasets' names or "ALL"
#experiments.rq4.datasets = hospitals, warehouses, random, randomLoose, randomTight, ppu, ppu_statem, bcs, bcms, Apogames, argouml,  simulink_family_1, simulink_family_2
experiments.rq4.datasets = ALL

# RQ5 uses the generated argouml subsets so there is no alternative option regarding the subsets. However, you can
# specify till which subset size to run the experiments (inclusively). To do so specify a percentage in a three digit format
# Examples:
# Run 1% and 5% subsets:
# experiments.rq5.largest-dataset = 005
# Run 1% - 65% subsets:
# experiments.rq5.largest-dataset = 065
# Run all subsets plus the full ArgoUML
# experiments.rq5.largest-dataset = 100
# We only require `095` because the full ArgoUML is already run by RQ1
experiments.rq5.largest-dataset = 095
experiments.rq5.matchers = raqun-char, raqun-overlap-25, raqun-overlap-50, raqun-overlap-75, raqun-overlap-100

# DO NOT CHANGE THESE WHEN RUNNING WITH DOCKER
experiments.dir.datasets = experimental_subjects
experiments.dir.results = results