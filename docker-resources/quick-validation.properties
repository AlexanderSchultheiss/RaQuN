# Flags that determine which algorithms should be run
experiments.matchers.nwm = false
experiments.matchers.pairwise-ascending = false
experiments.matchers.pairwise-descending = true
experiments.matchers.raqun = true

# Extra-Verbose mode, prints the tuples of each matching
experiments.execution.verbose = false
# Number of times each setup is executed, e.g., how often should RaQuN with high dimension vectorization be
# run on the dataset Hospital? The number of repetitions does not affect the required resources, only the total runtime.
# For RQ1 and RQ2, we ran 10 executions รก 3 repetitions in parallel (30 executions in total).
# However, this can only be done on a dedicated compute server with a large amount of resources.
# For RQ3, we ran 1 execution with 1 repetition (1 execution in total, but there are 30 datasets per subset size).
# If you plan on repeating our experiments on a system with limited resources, we advice to only run one docker container
# at a time.
experiments.execution.repetitions.rq1 = 3
experiments.execution.repetitions.rq2 = 3
experiments.execution.repetitions.rq3 = 1

# RQ1 can be evaluated on any dataset
experiments.rq1.datasets = hospitals,warehouses,random,randomLoose,randomTight,ppu,ppu_statem,bcs,bcms,Apogames
# RQ2 requires datasets with a ground truth
experiments.rq2.datasets = ppu,bcms
# RQ3 uses the generated argouml subsets so there is no alternative option regarding the subsets. However, you can
# specify till which subset size to run the experiments (inclusively). To do so specify a percentage in a three digit format
# Examples:
# Run 1% and 5% subsets:
# experiments.rq3.largest-dataset = 005
# Run 1% - 65% subsets:
# experiments.rq.largest-dataset = 065
# Run all subsets plus the full ArgoUML
# experiments.rq3.largest-dataset = 100
experiments.rq3.largest-dataset = 050

# Range of k for the evaluation of different numbers of neighbors for the candidate search for RQ2
experiments.rq2.start-k = 1
experiments.rq2.max-k = 20
experiments.rq2.max-k-argouml = 10

# Configuration of RaQuN. These options exist for future extension and should not be changed for repeating the experiments
raqun.vectorization = de.variantsync.matching.raqun.vectorization.PropertyBasedVectorization
raqun.validity = de.variantsync.matching.raqun.validity.OneToOneValidity
raqun.similarity = de.variantsync.matching.raqun.similarity.WeightMetric

# DO NOT CHANGE THESE
experiments.dir.datasets = experimental_subjects
experiments.dir.results = results