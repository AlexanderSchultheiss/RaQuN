# Only change this if you want to load models from a different directory
experiments.dir.datasets = "experimental_subjects";
# This directory is created in order to store all experimental results there
experiments.dir.results = "results";

# Flags that determine which algorithms should be run
experiments.matchers.nwm = false;
experiments.matchers.pairwise-ascending = false;
experiments.matchers.pairwise-descending = true;
experiments.matchers.raqun = true;

# Extra-Verbose mode, prints the tuples of each matching
experiments.execution.verbose = false;
# Number of times each setup is executed, e.g., how often should RaQuN with high dimension vectorization be
# run on the dataset Hospital? We ran 10 executions in parallel with 3 repetitions each
experiments.execution.repeats = 3;

# RQ1 can be evaluated on any dataset
experiments.rq1.datasets = hospitals,warehouses,random,randomLoose,randomTight,ppu,ppu_statem,bcs,bcms,Apogames,argouml
# RQ2 requires datasets with a ground truth
experiments.rq2.datasets = ppu,bcms,argouml
# RQ3 uses the generated argouml subsets so there is no alternative option regarding the subsets. However, you can choose
# no to run the matchers on the full argouml dataset, if it was done for RQ1
experiments.rq3.argouml-full = false

# Range of k for the evaluation of different numbers of neighbors for the candidate search for RQ2
experiments.rq2.start-k = 1;
experiments.rq2.max-k = 20;
experiments.rq2.max-k-argouml = 10;

# Configuration of RaQuN. These options exist for future extension and should not be changed for repeating the experiments
raqun.vectorization = de.variantsync.matching.raqun.vectorization.PropertyBasedVectorization
raqun.validity = de.variantsync.matching.raqun.validity.OneToOneValidity
raqun.similarity = de.variantsync.matching.raqun.similarity.WeightMetric